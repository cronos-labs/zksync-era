# yq -y < .github/std-unexploded.yml > .github/workflows/std.yml
name: STD 1

on:
  push:
    branches:
      - nix
    paths:
      - 'nix/local/oci-images.nix'

permissions:
  id-token: write
  contents: read
  packages: write
  attestations: write

concurrency:
  group: std-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover:
    outputs:
      hits: ${{ steps.discovery.outputs.hits }}
    runs-on: ubuntu-latest
    steps:
      - uses: nixbuild/nix-quick-install-action@master
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: divnix/std-action/discover@main
        id: discovery

  images:
    needs: [discover]
    runs-on: ubuntu-latest
    outputs:
      gh: ${{ steps.step1.outputs.gh }}
    if: fromJSON(needs.discover.outputs.hits).oci-images.publish != '{}'
    steps:
      - env:
          JSON: ${{ toJSON(fromJSON(needs.discover.outputs.hits).oci-images.publish) }}
        run: |
          gh=$(jq -c -r 'map(select(.name | startswith("gh")))' <<< "$JSON")
          echo "gh=$gh" >> "$GITHUB_OUTPUT"
        shell: bash
        id: step1

  images-gh:
    needs:
      - images
    name: ${{ matrix.target.jobName }}
    runs-on: ubuntu-latest
    if: needs.images.outputs.gh != '[]'
    strategy:
      matrix:
        target: ${{ fromJSON(needs.images.outputs.gh) }}
    steps:
      - uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: nixbuild/nix-quick-install-action@master
        with: {nix_conf: extra-sandbox-paths = /etc/skopeo/auth.json=/home/runner/.docker/config.json}
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: divnix/std-action/run@main
